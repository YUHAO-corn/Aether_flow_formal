### **一、核心参考项目**
#### **1. ChatGPT Exporter**  
**地址**: github.com/pionxzh/chatgpt-exporter  
**技术亮点**:  
• **DOM监听**: 使用`MutationObserver`实时捕获ChatGPT网页动态生成的对话块（`.group`类容器）。  
• **数据提取**: 遍历`.text-base`节点提取用户提问与AI回复。  
• **代码参考**: `src/content.js`中的`observeChatChanges()`函数。

#### **2. Bing Chat Exporter**  
**地址**: github.com/defineprogramming/bing-chat-exporter  
**技术亮点**:  
• **通信拦截**: 通过重写`WebSocket`对象捕获Bing的流式响应数据包。  
• **数据拼接**: 处理分块消息（如`"Thinking.../typing..."`状态）合并为完整回复。  
• **代码参考**: `inject.js`中的`websocket hijack`逻辑。

#### **3. SaveMyPhind Exporter**  
**地址**: github.com/Hugo-COLLIN/SaveMyPhind-conversation-exporter  
**技术亮点**:  
• **静态DOM解析**: 使用`document.querySelectorAll('.message')`直接抓取Phind问答内容。  
• **Markdown生成**: 将对话转换为结构化Markdown文件。  
• **代码参考**: `content.js`中的`exportToMarkdown()`方法。

---

### **二、关键技术方案**
#### **1. 动态内容监听（必用）**  
• **工具**: MutationObserver API  
• **代码模板**:  
  ```javascript
  // 监听整个文档的节点变化
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach((node) => {
          // 检查是否为对话节点（需替换为目标平台的选择器）
          if (node.matches?.('.message-container')) { 
            const text = node.querySelector('.content').innerText;
            chrome.runtime.sendMessage({type: 'new_message', data: text});
          }
        });
      }
    });
  });
  observer.observe(document.body, { childList: true, subtree: true });
  ```

#### **2. 平台专属适配器**  
• **Claude.ai适配**:  
  ```javascript
  if (window.location.host === 'claude.ai') {
    // Claude的对话块选择器
    const messages = document.querySelectorAll('.anthropic-message');
    messages.forEach(msg => {
      const role = msg.querySelector('.role').innerText; // 'Human' 或 'Assistant'
      const content = msg.querySelector('.content').innerText;
    });
  }
  ```

• **Bard适配**:  
  ```javascript
  if (window.location.host.includes('bard.google.com')) {
    // Bard的消息容器类名
    const bardMessages = document.querySelectorAll('.message-content'); 
  }
  ```

#### **3. 网络请求捕获（备选）**  
• **适用场景**: 当DOM结构难以解析时，直接拦截AI平台的API请求（需manifest权限）:  
  ```json
  // manifest.json (MV3)
  "host_permissions": ["*://*.openai.com/*", "*://*.anthropic.com/*"]
  ```
  ```javascript
  // background.js (Service Worker)
  chrome.webRequest.onCompleted.addListener(
    (details) => {
      if (details.url.includes('/api/conversation')) {
        // 解析响应中的对话数据
      }
    },
    { urls: ['*://*.openai.com/*'] }
  );
  ```

---

### **三、避坑指南**  
1. **SPA路由问题**:  
   • 在Vue/React等单页应用中，监听`window.onhashchange`或`history.pushState`事件，重新绑定DOM监听器。  

2. **Shadow DOM穿透**:  
   • 如果目标平台使用Shadow DOM（如某些企业级应用），需用`mode: 'open'`强制穿透:  
     ```javascript
     const shadowRoot = document.querySelector('chat-container').shadowRoot;
     shadowRoot.querySelector('.message'); 
     ```

3. **事件冲突**:  
   • 使用`{ capture: true }`参数抢占事件监听（防止页面代码阻止冒泡）:  
     ```javascript
     document.addEventListener('click', handleClick, { capture: true });
     ```

---

### **四、开发工具链**  
1. **调试工具**:  
   • Chrome扩展调试器：`chrome://extensions` -> 点击扩展的"背景页"和"内容脚本"控制台。  
   • 元素选择器：在目标网页中按`Ctrl+Shift+C`快速定位对话块的CSS路径。  

2. **必要文档**:  
   • **MutationObserver API**: developer.mozilla.org/en-US/docs/Web/API/MutationObserver  
   • **Chrome扩展开发**: developer.chrome.com/docs/extensions  

---

### **五、分步实现建议**  
1. **单平台验证**: 从ChatGPT开始，用ChatGPT Exporter代码快速实现基础捕获。  
2. **多平台扩展**: 在`content_scripts`中根据URL动态加载不同平台的解析规则。  
3. **数据存储**: 使用`chrome.storage.local`保存捕获的对话，支持导出为JSON/文本。  

如果需要针对特定平台（如Claude或Bard）的完整代码模板，请告知具体目标！