# AetherFlow项目Cursor规则

## 文档管理规范

1. **优先更新现有文档**
   - 当有内容需要记录时，优先更新项目管理和项目架构目录下的现有文档
   - 如果没有合适的文档，询问用户是否创建新文档，得到允许后再创建
   - 避免创建重复或类似的文档，保持文档结构清晰

2. **对话记录规范**
   - 每轮对话结束后，将重要内容记录到`项目管理/AI协作对话记录.md`
   - 使用本地时间（通过`new Date().toISOString().split('T')[0]`获取）
   - 按照以下格式记录：
     ```
     **问题**: [简要描述问题或需求，一段话]
     **观点**: [简要描述讨论的主要观点，一段话]
     **解决方案**: [简要描述采用的解决方案，一段话]
     **后续行动**: [简要描述后续需要执行的行动，一段话]
     **用户操作**: [如有需要用户操作的内容，简要描述，一段话；如无则可省略]
     ```
   - 不记录具体代码，只记录关键决策和解决思路

3. **任务跟踪规范**
   - 每完成一次阶段性任务后，更新`项目管理/任务跟踪文档.md`
   - 更新内容包括：
     - 已完成任务的状态更新
     - 进行中任务的进度更新
     - 新增待开发任务
     - 当前优先级任务的调整

4. **文档更新原则**
   - 保持文档与代码的一致性，及时反映最新的实现状态
   - 为长文档添加目录，提高导航性
   - 使用清晰的章节结构和标题层级
   - 删除过时或冗余的内容，保持文档简洁

5. **界面与功能需求**
   - 界面与功能需求在询问得到允许前，不能修改
   - 如需新设计，向用户询问并获得确认

6. **测试与日志**
   - 在人工测试前需要有足够高的测试覆盖率和完善的日志
   - 避免人工测试多次报错

7. **功能区分规则**
   - 严格区分不同功能，特别是容易混淆的功能
   - 明确区分以下容易混淆的功能：
     - **提示词库(PromptLibrary)**：已完成的功能，在插件侧边栏展示提示词卡片列表，点击卡片后显示模态窗口，支持复制和插入提示词
     - **提示词快捷输入(Prompt Image)**：开发中的功能，用户在AI平台输入框中输入"/"后显示提示词下拉菜单，不包含模态窗口
   - 在文档中明确说明功能的区别，避免混淆

## 项目了解指南

1. **项目初识**
   - 刚开始接触项目时，首先通过`项目管理`目录了解项目进度和状态
   - 通过`项目架构`目录了解项目的整体结构和技术选型
   - 重点查看以下文档：
     - `项目管理/任务跟踪文档.md`：了解当前进度和优先级任务
     - `项目架构/后端架构设计.md`：了解后端架构和API设计
     - `项目架构/项目规范.md`：了解项目开发规范
     - `项目架构/功能表述统一.md`：了解功能的标准命名和描述

2. **代码熟悉**
   - 先了解项目的整体结构，再深入具体模块
   - 关注核心模块的实现和接口设计
   - 理解数据流和业务逻辑

## 开发规范

1. **规避重复开发**
   - 在实现新功能前，先检查是否已有类似实现
   - 优先复用现有代码和组件，避免重复实现
   - 遵循DRY原则（Don't Repeat Yourself）

2. **现有方案优先**
   - 涉及通用功能（如插件打包、侧边栏）时，强制检索开源库（npm/pip等）及官方API文档
   - 质量评估标准：筛选社区维护度高（GitHub stars≥500）、文档完备的开源方案
   - 反面案例：
     - 避免自研webpack打包脚本 → 使用crxjs/vite-plugin
     - 避免原生实现侧边栏 → 调用chrome.sidePanel API

3. **技术选型原则**
   - 优先使用项目已采用的技术栈和库
   - 引入新库前，评估其维护状态、社区活跃度和文档质量
   - 避免引入过多依赖，增加项目复杂度

4. **代码质量要求**
   - 遵循项目既定的代码风格和命名规范
   - 编写清晰的注释和文档
   - 实现前编写测试用例，确保代码质量

## 协作规范

1. **用户协助**
   - 如果当前问题需要用户协助解决，告知用户
   - 将需要用户操作的内容记录在"协作指南"文档内

2. **语言要求**
   - 所有回复使用中文

3. **文档引用**
   - 引用文档时使用`@文档名`格式，如`@任务跟踪文档.md`
   - 引用代码区域时使用```startLine:endLine:filepath格式

4. **工具使用**
   - 不要在回复中提及工具名称
   - 优先使用语义搜索而非grep搜索

# AetherFlow 项目规则

## 前端逆向工程规则

1. **不要修改现有前端架构**：
   - 这是一个前端逆向工程项目，不应对前端进行频繁或大规模改造
   - 只在必要时进行最小化的修改，保持原有架构和设计模式

2. **保持英文界面**：
   - 前端界面必须保持英文，不要将界面元素翻译成中文
   - 所有UI文本、按钮标签、提示信息等都应使用英文

3. **功能职责分离**：
   - 严格遵循插件和网页端的功能职责分离原则
   - **插件端功能**（不应在网页端实现）：
     - 提示词自动捕获功能：监听用户与AI平台的交互
     - 提示词自动保存功能：自动保存捕获的提示词
     - 提示词库功能：在插件侧边栏展示提示词卡片列表，点击卡片后显示模态窗口
     - 提示词快捷输入功能：用户在AI平台输入框中输入"/"后显示提示词下拉菜单
     - 提示词优化功能：在插件侧边栏提供优化Prompt功能
     - 智能建议功能：系统预设提示词卡片，按不同场景和用途分类
     - 内容脚本注入：向特定网站注入JavaScript代码
     - 浏览器API调用：使用chrome.* API进行浏览器交互
   - **网页端功能**（不应在插件端重复实现）：
     - 提示词管理：浏览、编辑、删除保存的提示词
     - 标签管理：创建、编辑、删除标签
     - 提示词实验室：在网页端测试和优化提示词
     - 分析仪表盘：查看提示词使用统计和分析
     - 用户账户管理：注册、登录、个人资料设置
   - **共享功能**（两端都可实现，但实现方式可能不同）：
     - 提示词优化：可在两端提供，但实现方式和UI可能不同
     - 设置功能：两端都需要，但配置项可能不同
     - 认证功能：两端都需要，但实现方式不同

4. **功能区分规则**：
   - 严格区分容易混淆的功能，特别是：
     - **提示词库(PromptLibrary)**：已完成的功能，在插件侧边栏展示提示词卡片列表，点击卡片后显示模态窗口，支持复制和插入提示词
     - **提示词快捷输入(Prompt Image)**：开发中的功能，用户在AI平台输入框中输入"/"后显示提示词下拉菜单，不包含模态窗口
   - 这两个功能虽然都支持将提示词插入到AI平台，但交互方式和使用场景完全不同
   - 在开发和文档中明确区分这些功能，避免混淆

5. **利用现有组件**：
   - 在需要新功能时，优先考虑使用现有组件
   - Laboratory已经提供了沙盒调试功能，不需要创建新的沙盒调试组件

6. **保持一致性**：
   - 新添加的功能应与现有设计保持一致
   - 遵循现有的命名约定、代码风格和设计模式

## 开发流程规则

1. **先分析后实现**：
   - 在实现任何功能前，先全面分析现有代码和架构
   - 理解现有功能的实现方式和交互逻辑

2. **最小化修改原则**：
   - 对现有代码的修改应尽可能小
   - 优先考虑扩展而非重写

3. **测试验证**：
   - 任何修改都应经过充分测试，确保不破坏现有功能
   - 验证新功能与现有系统的兼容性

4. **文档记录**：
   - 记录所有对前端的修改
   - 更新相关文档，确保团队成员了解变更

## 沟通规则

1. **明确需求**：
   - 在实施任何修改前，确保完全理解需求
   - 有疑问时主动询问，避免基于错误理解进行开发

2. **报告进展**：
   - 定期报告开发进展
   - 及时沟通遇到的问题和解决方案

遵循这些规则将确保项目的一致性和质量，避免不必要的重复工作和错误。 